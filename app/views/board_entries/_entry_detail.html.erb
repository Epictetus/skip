<%
 # ブログ・フォーラムの詳細表示（１記事指定）
 # :locals => { :entry, :to_tb_entries, :checked_on, :entry_accesses, :total_count }
  entry = @board_entry
  to_tb_entries = BoardEntry.accessible(current_user).id_is(entry.to_entry_trackbacks.map(&:board_entry_id))
  checked_on = if reading = entry.user_readings.find_by_user_id(current_user.id)
                 reading.checked_on
               end
-%>

<% content_for :stylesheet do -%>
  <style type="text/css">
  div.move_navi {
    position: relative;
    height: 1.3em;
    text-align: center;
    font-size: 0.8em;
  }
  div.move_navi .next_entry {
    position: absolute;
    right: 0;
    top: 0;
  }
  div.move_navi .prev_entry {
    position: absolute;
    left: 0;
    top: 0;
  }
  div#board_entry {
    border: 1px solid silver;
    position: relative;
    _width: 100%;
  }
  div#board_entry .header {
    border-bottom: 1px solid silver;
    background-color: #f0f0f0;
  }
  div#board_entry .header .control {
    position: relative;
    font-size: 0.8em;
    border-bottom: 1px solid silver;
    background-color: #e1e1e1;
  }
  div#board_entry .header .control .buttons {
    text-align: right;
    height: 2em;
    position: absolute;
    right: 2px;
    top: 2px;
  }
  div#board_entry .header .information {
    position: relative;
    font-size: 0.8em;
    border-bottom: 1px solid silver;
  }
  div#board_entry .header .information .date {
    font-size: 1.3em;
  }
  div#board_entry .header .information .date .evaluation {
    font-size: 0.8em;
  }
  div#board_entry .header h1 {
    margin: 1px;
    font-size: 15px;
  }
  #permalink a, #permalink a:hover {
    font-size: 1.2em;
  }
  div#board_entry .contents {
    background-color: #FFFFFF;
    overflow-y: visible;
    overflow: hidden;
    width: 100%;
  }
  div#board_entry .contents_body {
    margin: 5px;
  }
  div#board_entry .contents_body pre {
    white-space: -moz-pre-wrap; /* Mozilla */
    white-space: -pre-wrap;     /* Opera 4-6 */
    white-space: -o-pre-wrap;   /* Opera 7 */
    white-space: pre-wrap;      /* CSS3 */
    word-wrap: break-word;      /* IE 5.5+ */
  }
  div#source_style_area, div#access_style_area {
    background-color: #ffffdd;
  }
  div#source_style_area .header {
    margin-bottom: 5px;
    font-weight: bold;
  }
  div#default_style_area {
    display: block;
  }
  div#default_style_area .images {
    border: 2px solid silver;
    overflow-y: visible;
    overflow: hidden;
    margin: 3px;
  }
  div#board_entry_control {
    position: relative;
    height: 2.0em;
    font-size: 0.8em;
  }
  div#board_entry_control .actions {
    position: absolute;
    left: 3px;
    top: 0;
  }
  div#board_entry_control .evaluation {
    position: absolute;
    top: 0;
    right: 0;
  }
  div#board_entry_comments #comments_header {
    /* border: 1px solid silver; */
    position: relative;
    height: 1.5em;
    font-size: 0.8em;
  }
  div#board_entry_comments #comments_header .buttons {
    position: absolute;
    right: 2px;
    bottom: 0;
  }
  div#board_entry_comments .level1 {
    margin: 0 0 5px 0;
    background-color: #F0F0F0;
  }
  div#board_entry_comments .level2, div#board_entry_comments .level3,
  div#board_entry_comments .level4, div#board_entry_comments .level5 {
    margin-left: 20px;
  }
  div#board_entry_comments .level2 {
    background-color: #E8E8E8;
  }
  div#board_entry_comments .level3 {
    background-color: #E0E0E0;
  }
  div#board_entry_comments .level4 {
    background-color: #D8D8D8;
  }
  div#board_entry_comments .level5 {
    background-color: #D0D0D0;
  }
  div#board_entry_comments div.board_entry_comment .content {
    _width: 100%;
    overflow-y: visible;
    overflow: hidden;
    padding: 0 0 0 3px;
    margin-bottom: 0px;
  }
  .board_entry_comment div.edit_nest_comment {
    font-size: 10px;
  }
  .comment_input_space {
    margin-top: 5px;
  }
  .comment_input_space input {
    font-size: 10px;
  }
  .comment_input_space textarea {
    margin-bottom: 5px;
    width: 95%;
  }
  form#new_comment_form label {
    display: block;
  }
  form#comment_input_form label {
    margin-top: 3px;
    font-size: 0.8em;
    color: gray;
    display: block;
  }
  form.comment_input_form textarea{
    display: block;
  }
  .trackback_space {
    background-color: #f0f0ff;
  }
  .trackback_space .entries {
    margin-left: 20px;
  }
  .send_trackback {
    padding: 5px;
    border-top: 1px solid silver;
  }
  .sent_trackback {
    padding: 5px;
    margin-top: 10px;
    border: 1px solid silver;
  }
  </style>
<% end -%>
<div class="move_navi">
  <% if prev_entry = entry.prev_accessible(current_user, current_target_owner) -%>
  <span class="prev_entry">&lt;&nbsp;<%= entry_link_to(prev_entry, {:truncate => 20}) %></span>
  <% end -%>
  <% if next_entry = entry.next_accessible(current_user, current_target_owner) -%>
  <span class="next_entry"><%= entry_link_to(next_entry, {:truncate => 20}) %>&nbsp;&gt;</span>
  <% end -%>
  <a id="page_top" href="#page_bottom"><%= _('[Bottom of page]')%></a>
</div>

<div id="board_entry" class="ui-corner-all">
  <div class="header">
    <div class="control">
      <% if BoardEntry::HIDABLE_AIM_TYPES.include?(entry.aim_type) -%>
        <div id="hide_action" class="ui-corner-all">
          <% form_for entry, :url => polymorphic_path([current_tenant, current_target_owner, entry], :action => :toggle_hide) do |f| -%>
            <span class="iphone_style_checkbox"><%= check_box_tag 'toggle_hide', 'hide', !entry.hide %></span>
            <!-- <b class="remarkable"><%= h _("This question will be hidden from all users' My Page after you set it to \"Closed\".") %></b> -->
          <% end -%>
        </div>
        <div id="hide_message">
          <span id="indicator" style="display:none;"><%= skip_image_tag 'indicator.gif' %></span>
          <%= render :partial => 'entry_hide_operations/list', :locals => {:entry_hide_operations => entry.entry_hide_operations.order_new} %>
        </div>
      <% else %>
        <div style="height: 2em;"></div>
      <% end -%>
      <div class="buttons" id="entry_buttons">
        <span id="permalink"><%= link_to "[page:#{entry.id}]", [current_tenant, current_target_owner, entry] %></span>
        <%= _('Display: ') %>
        <% if entry.full_accessible?(current_user) -%>
          <a href="#" id="access_style_button"><%= icon_tag('group', :title => _("Access Log")) %></a>
        <% end -%>
        <a href="#" id="default_style_button"><%= icon_tag('page_white_text', :title => _('Blog Entry View')) %></a>
        <a href="#" id="source_style_button"><%= icon_tag('page_white_code', :title => _('View Source')) %></a>
        <%= _('Action:') %>
        <%= link_to(icon_tag('page_edit', :title => _('Edit')), edit_polymorphic_path([current_tenant, current_target_owner, entry])) if entry.full_accessible?(current_user) %>
        <% if bookmark_enabled? -%>
          <%= link_to(icon_tag('tag_blue_add', :title => _('Bookmark this')), polymorphic_path([current_tenant, :bookmarks], :action => :new_without_bookmarklet, :bookmark => {:url => polymorphic_path([current_tenant, entry]), :title => h(entry.title)}), :target => '_blank') %>
        <% end -%>
        <%= link_to(icon_tag('zoom', :title => _('Maximize!')), polymorphic_path([current_tenant, current_target_owner, entry], :action => :print), :target=>"_blank") %>
        <%= _('Read/Unread:') %>
        <%= toggle_read_check_box entry %>
      </div>
    </div>
    <div class="information">
      <div class="date">
        <%= "[" + s_("BoardEntry|Aim type|#{entry.aim_type}") + "]" %>
        <%=h entry.diary_date %> <%= "by #{user_link_to(entry.user)}" %> - 
        <% visibility, visibility_color = entry.visibility -%><span title=<%= visibility %> style='background-color: <%=visibility_color%>;'>[<%= translate_publication_type(entry) %>]</span>
        <span class="evaluation"><%= get_entry_infos(entry) -%></span>
      </div>
    </div>
    <h1><%=h entry.title %> <span class="tags"><%= entry_tag_search_links_tag(entry.category) %></span></h1>
    <% unless to_tb_entries.empty? -%>
    <div class="trackback_space send_trackback">
      <%= _('Topic Entry: ')%>
      <ul class="entries">
    <% to_tb_entries.each do |to_tb_entry|  -%>
        <li>
        <%= entry_link_to to_tb_entry %> - <%= user_link_to to_tb_entry.user %>(<%= link_to_write_place to_tb_entry.owner %>)
        </li>
    <% end -%>
      </ul>
    </div>
    <% end -%>
  </div>
  <div class="contents">
    <div class="contents_body">
      <div id="default_style_area">
        <%= show_contents entry %>
      </div>
      <div id="source_style_area" class="invisible">
        <div class="header"><%= _('[Show source]')%></div><pre><%=h entry.contents.gsub("<br />", "<br/>\r\n") %></pre>
      </div>
      <div id="access_style_area" class="invisible">
      <% if entry.full_accessible?(current_user) %>
        <%= render :partial => "access", :locals => {:entry => entry} %>
      <% end %>
      </div>
    </div>
  </div>
</div>
<div id="board_entry_control">
  <span class="evaluation">
    <span id="board_entry_point">
    <%= render(:partial => 'board_entry_points/pointup', :locals => { :entry => entry }) %>
    </span>
  </span>
</div>

<div id="board_entry_comments">
  <div id="comments_header">
    <span class="buttons invisible">
      [
       <span id="sort_desc_label" class="invisible"><%= _('New Entries on Top')%></span><a href="#" id="sort_desc_link"><%= _('New Entries on Top')%></a>
       | <span id="sort_asc_label" class="invisible"><%= _('Old Entries on Top')%></span><a href="#" id="sort_asc_link"><%= _('Old Entries on Top')%></a>
       | <span id="sort_default_label"><%= _('Resume default order')%></span><a href="#" id="sort_default_link" class="invisible"><%= _('Resume default order')%></a>
      ]
    </span>
  </div>
<% entry.root_comments.each do |comment| -%>
  <%= render(:partial => "board_entry_comments/board_entry_comment", :locals=>{:comment => comment, :checked_on => checked_on }) %>
<% end -%>
</div>

<%= render :partial => 'board_entry_comments/new', :locals => {:entry => entry} %>

<div class="trackback_space sent_trackback ui-corner-all">
<% if entry.entry_trackbacks.size > 0 -%>
  <%= _('Entries talking about this entry:')%>
<% end -%>
  <ul class="entries">
<% entry.entry_trackbacks.each do |trackback|  -%>
  <% tb_entry = trackback.board_entry -%>
    <li>
    <%= entry_link_to tb_entry %> - <%= user_link_to tb_entry.user %>（<%= link_to_write_place tb_entry.owner %>）
    <- <%= link_to _(" [Delete]"), [current_tenant, current_target_owner, entry, trackback], {:confirm => _("Are you sure to delete?"),  :method => :delete} if current_user.id == entry.user_id %>
    </li>
<% end -%>
  </ul>
  <%# FIXME トラバ時に正しくデータを引き継げるようにする %>
  <% if current_target_owner.is_a?(Group) && current_user.joined?(current_target_owner) -%>
    <p><%= link_to _("[Write a new forum entry with this as topic]"), new_polymorphic_path([current_tenant, current_target_owner, :board_entry], :trackbacks => entry.id, :board_entry => {:title => "RE: #{h entry.title}", :category => h(entry.category)}) %><%= help_icon_tag :content => _('Create a new forum entry inheriting the privacy setting.') %></p>
  <% end -%>
  <p><%= link_to _("[Write a new blog entry with this as topic]"), new_polymorphic_path([current_tenant, current_user, :board_entry], :trackbacks => entry.id, :board_entry => {:title => "RE: #{h entry.title}", :category => h(entry.category)}) %><%= help_icon_tag :content => _("Create an \"open to public\" blog entry disregarding the privacy setting.") %></p>
</div>

<div class="move_navi">
  <a id="page_bottom" href="#page_top"><%= _('[Top of page]')%></a>
</div>

<% content_for :javascript_initializers do -%>
      // 書き込みボタン押下時
      $j('#new_comment_form')
      .submit(function() {
          if(isEmpty($j(this).find('textarea').val())) {
              return false;
          }
          $j.ajax({
              type:'POST',
              url: $j(this).attr('action'),
              data: $j(this).serialize(),
              success: function(html) {
                  jhtml = $j(html);
                  setupComment(jhtml);
                  $j('#board_entry_comments').append(jhtml);
                  $j('#board_entry_comment_contents').val('');
                  showSortMenu();
              }
          });
          return false;
      });

      // ブログ表示リンククリック時
      $j('#default_style_button')
      .click(function() {
          changeStyleMenu('default');
          return false;
      });

      // ソース表示リンククリック時
      $j('#source_style_button')
      .click(function() {
          changeStyleMenu('source');
          return false;
      });

      // アクセス履歴リンククリック時
      $j('#access_style_button')
      .click(function() {
          changeStyleMenu('access');
          return false;
      });

      // コメントソート(標準)リンククリック時
      $j('#sort_default_link')
      .click(function() {
          sortComment('default');
          changeSortMenu('default');
          return false;
      });

      // コメントソート(降順)リンククリック時
      $j('#sort_desc_link')
      .click(function() {
          sortComment('desc')
          changeSortMenu('desc')
          return false;
      });

      // コメントソート(昇順)リンククリック時
      $j('#sort_asc_link')
      .click(function() {
          sortComment('asc')
          changeSortMenu('asc')
          return false;
      });

      // 引数の値によってコメントを標準、昇順、降順にソートする
      var sortComment = function(sortType) {
          // 引数のコメントツリーについて最大のコメントIDを返す
          var getMaxCommentId = function(tree) {
              var children = $j.makeArray($j(tree).find('.board_entry_comment'));
              if( children.length == 0 ) {
                  return -tree.id.split('_')[1]
              }
              var descSortedChildren = children.sort(
                  function(leftChildren, rightChildren){
                      return rightChildren.id.split('_')[1] - leftChildren.id.split('_')[1];
                  }
              );
              return -descSortedChildren[0].id.split('_')[1];
          };

          sortType = sortType || 'default';
          var trees = $j.makeArray($j('#board_entry_comments .level1'));
          var sortDefault = function(leftTree, rightTree) {
              return leftTree.id.split('_')[1] - rightTree.id.split('_')[1];
          };
          $j.each(
              trees.sort(
                  function(leftTree, rightTree) {
                      if (sortType == 'default') {
                          return sortDefault(leftTree, rightTree);
                      } else if (sortType == 'asc') {
                          return getMaxCommentId(rightTree) - getMaxCommentId(leftTree);
                      } else if (sortType == 'desc') {
                          return getMaxCommentId(leftTree) - getMaxCommentId(rightTree);
                      } else {
                          return sortDefault(leftTree, rightTree);
                      }
                  }
              ),
              function(){
                  $j(this).remove().appendTo('#board_entry_comments');
              }
          );
          setupComment(document);
      };

      // コメントソートの表示制御
      var showSortMenu = function() {
          if ( $j('.board_entry_comment.level1').length > 1 ) {
              $j('#board_entry_comments > #comments_header > .buttons').show();
          } else {
              $j('#board_entry_comments > #comments_header > .buttons').hide();
          }
      };
      showSortMenu();

      // コメントソート(標準)、コメントソート(昇順)、コメントソート(降順)を切り替える
      var changeSortMenu = function(sortType) {
          var sortTypes = ['default', 'desc', 'asc'];
          $j.each(sortTypes, function() {
              if(this == sortType) {
                  $j('#sort_' + this + '_label').show();
                  $j('#sort_' + this + '_link').hide();
              } else {
                  $j('#sort_' + this + '_label').hide();
                  $j('#sort_' + this + '_link').show();
              }
          });
      };

      // ブログ表示、ソース表示、アクセス履歴を切り替える
      var changeStyleMenu = function(styleType) {
          var styles = ["default", "source", "access"];
          $j.each(styles, function() {
              if(this == styleType) {
                  $j('#' + this + '_style_area').show('normal');
                  $j('#' + this + '_style_label').show();
                  $j('#' + this + '_style_link').hide();
              } else {
                  $j('#' + this + '_style_area').hide('fast');
                  $j('#' + this + '_style_label').hide();
                  $j('#' + this + '_style_link').show();
              }
          });
      };

      // 引数の文字列が空白以外で1文字以上かどうか
      var isEmpty = function(text) {
          if($j.trim(text).length == 0) {
              alert("<%= _('One or more characters other than spaces required.')%>");
              return true;
          }
          return false;
      };

      // 編集ボタン押下時の処理
      var setupCommentEditLink = function(target) {
          $j(target)
          .find('.comment_edit_link')
          .click(function() {
              commentId = this.id.split('_')[3];
              $j('#comment_contents_' + commentId).fadeOut(0, function() {
                  $j('#comment_area_' + commentId).fadeIn('fast', function() {
                      $j('#comment_input_form_' + commentId + ' textarea').focus();
                  });
              });
              return false;
          });
      };

      // コメント編集フォームのキャンセルボタン押下時の処理
      var setupCommentCancelButton = function(target) {
          $j(target)
          .find('.comment_cancel_button')
          .click(function() {
              commentId = this.id.split('_')[3];
              if ($j('#comment_area_' + commentId).is(':visible')) {
                  $j('#comment_area_' + commentId).fadeOut(0, function() {
                      $j('#comment_contents_' + commentId).fadeIn('fast');
                  });
              }
              return false;
          });
      };

      // コメント編集フォームをサブミットした時の処理
      var setupCommentInputForm = function(target) {
          $j(target)
          .find('.comment_input_form')
          .submit(function() {
              commentId = this.id.split('_')[3];
              if(isEmpty($j(this).find('textarea').val())) {
                  return false;
              }
              $j.ajax({
                  type: 'POST',
                  url: $j(this).attr('action'),
                  data: $j(this).serialize(),
                  success :function(html) {
                      $j('#comment_contents_' + commentId).html(html);
                      if ($j('#comment_area_' + commentId).is(':visible')) {
                          $j('#comment_area_' + commentId).fadeOut(0, function() {
                              $j('#comment_contents_' + commentId).fadeIn('fast');
                          });
                      }
                  }
              });
              return false;
          });
      };

      // 「このコメントに返信」ボタン押下時の処理
      var setupCommentNestLink = function(target) {
          $j(target)
          .find('.comment_nest_link')
          .click(function() {
              commentId = this.id.split('_')[3];
              level = this.id.split('_')[4] - 0 + 1;
              // ネストレベルを保持するhiddenフィールドを作成
              var hiddenLevel = function() {
                  return $j(document.createElement('input')).attr({type:'hidden', name:'level', value:level});
              };

              // トークン
              var hiddenToken = function() {
                  return $j(document.createElement('input')).attr({type:'hidden', name:'authenticity_token', value: authenticity_token()});
              };

              // 説明を作成
              var divDesc = function() {
                  return $j(document.createElement('div'))
                  .append(document.createTextNode('<%= _("Reply to this comment")%>'))
                  .css({marginTop:'3px', fontSize:'10px', color:'gray'});
              };

              // コメント入力用テキストエリアを作成
              var divText = function() {
                  var div = $j(document.createElement('div'));
                  $j(document.createElement('input'))
                  .attr({type: 'hidden', name: 'board_entry_comment[parent_id]', value: commentId})
                  .appendTo(div);
                  $j(document.createElement('textarea'))
                  .attr({rows:5, name:'board_entry_comment[contents]'})
                  .css('width', '90%')
                  .appendTo(div);
                  return div
              };

              // 保存ボタンを作成
              var saveButton = function(jform) {
                  return $j(document.createElement('input'))
                  .attr({type:'button', value:'<%= _("Save")%>'})
                  .css({fontSize:'10px'})
                  .click(function() {
                      if(isEmpty(jform.find('textarea').val())) {
                          return false;
                      }
                      $j.ajax({
                          type:'POST',
                          url:'<%= polymorphic_path([current_tenant, current_target_owner, entry, :board_entry_comments]) %>',
                          data:jform.serialize(),
                          success:function(html) {
                              jhtml = $j(html)
                              setupComment(jhtml);
                              jform.fadeOut('0', function(){
                                  $j('#link_nest_comment_' + commentId).show();
                                  $j(document.createElement('div'))
                                  .appendTo('#view_nest_comment_' + commentId)
                                  .append(jhtml)
                                  .hide()
                                  .fadeIn('fast');
                                  jform.remove();
                              });
                          }
                      });
                      return false;
                  });
              };

              // キャンセルボタンを作成
              var cancelButton = function(jform) {
                  return $j(document.createElement('input'))
                  .attr({type:'button', value:'<%= _("Cancel")%>'})
                  .css({fontSize:'10px'})
                  .click(function() {
                      jform.fadeOut('0', function(){
                          $j('#link_nest_comment_' + commentId).show();
                          jform.remove();
                      });
                      return false;
                  });
              };

              $j('#link_nest_comment_' + commentId).hide();
              $j('#edit_nest_comment_' + commentId).empty();
              // コメント返信フォームを作成して表示
              var jform = $j(document.createElement('form'));
              jform
              .append(hiddenLevel())
              .append(hiddenToken())
              .append(divDesc())
              .append(divText())
              .append(
                  $j(document.createElement('div'))
                  .append(saveButton(jform))
                  .append(cancelButton(jform))
              )
              .hide()
              .fadeIn('fast')
              .appendTo('#edit_nest_comment_' + commentId);

              $j("textarea").jGrow({ rows: 25 });
          });
      };
      var setupComment = function(target){
          setupCommentEditLink(target);
          setupCommentCancelButton(target);
          setupCommentInputForm(target);
          setupCommentNestLink(target);
      };
      setupComment(document);

      // チェックボックスをリッチに
      var iphoneStyleCheckbox = $j('input#toggle_hide').iphoneStyle( { checkedLabel: '<%= _('Open') %>', uncheckedLabel: '<%= s_('BoardEntry|Open|false') %>', resizeContainer: false, resizeHandle: false } );
      iphoneStyleCheckbox.change(function(){
        $j('#hide_message ul').hide();
        $j('#indicator').show();
        $j.ajax({
          type: 'POST',
          url: $j('#hide_action form').attr('action'),
          data: $j('#hide_action form').serialize(),
          success: function(msg) {
              $j.ajax({
                type: 'GET',
                url: '<%= polymorphic_url([current_tenant, current_target_owner, entry, :entry_hide_operations]) %>',
                success: function(html) {
                  $j('#hide_message ul').replaceWith(html);
                  $j('#hide_history').hide();
                  $j('#show_history').show();
                },
                complete: function(request){
                  $j('#indicator').hide();
                }
              });
              $j("#flash_message").trigger("notice", msg);
          },
          error: function(msg){
              $j("#flash_message").trigger("error", msg);
          }
        });
      });

      <% if BoardEntry::HIDABLE_AIM_TYPES.include?(entry.aim_type) -%>
      // 質問の公開/非公開履歴を表示
      $j('#show_history').live('click', function() {
        $j('ul li.history').slideDown('fast');
        $j(this).hide();
        $j('#hide_history').show();
        return false;
      });
      $j('#hide_history').live('click', function() {
        $j('ul li.history').slideUp('fast');
        $j(this).hide();
        $j('#show_history').show();
        return false;
      });
      <% end -%>

      var authenticity_token = function(){
          return $j('input[name="authenticity_token"]').eq(0).val();
      };

      $j("textarea").jGrow({ rows: 25 });

      //flowplayer('player', relative_url_root + '/flowplayer-3.1.5.swf');
<% end -%>
